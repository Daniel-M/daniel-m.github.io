<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pyenv on Daniel Mejía Raigosa</title>
    <link>https://daniel-m.github.io/categories/pyenv/</link>
    <description>Recent content in pyenv on Daniel Mejía Raigosa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Mar 2023 15:52:28 -0500</lastBuildDate><atom:link href="https://daniel-m.github.io/categories/pyenv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Managing python versions and virtual environments with pyenv</title>
      <link>https://daniel-m.github.io/2023/03/managing-python-versions-and-virtual-environments-with-pyenv/</link>
      <pubDate>Mon, 06 Mar 2023 15:52:28 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2023/03/managing-python-versions-and-virtual-environments-with-pyenv/</guid>
      <description>What is pyenv? pyenv is a tool that lets you easily switch between multiple versions of Python, and it is really useful to work on python projects that require different python versions. If you are familiar with nvm the node version manager, pyenv follows a similar approach.
Another big advantage of pyenv is the use of pyenv-vitualenv which completely isolates environments. I know you can use python -m venv but, having completely isolated python installations and requisites makes the programming process more reproducible (say, to get things inside containers, or have proper specs to run the code)</description>
    </item>
    
  </channel>
</rss>
