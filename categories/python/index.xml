<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Daniel Mejía Raigosa</title>
    <link>https://daniel-m.github.io/categories/python/</link>
    <description>Recent content in python on Daniel Mejía Raigosa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Feb 2020 00:08:20 -0500</lastBuildDate>
    
	<atom:link href="https://daniel-m.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Character encodings and a bit of Python</title>
      <link>https://daniel-m.github.io/2020/02/character-encodings-and-a-bit-of-python/</link>
      <pubDate>Fri, 07 Feb 2020 00:08:20 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2020/02/character-encodings-and-a-bit-of-python/</guid>
      <description>I&amp;rsquo;ve been wanting to write about character sets and encodings for a while, since I had problems in the past understanding what is it all about?
Words and information When reading this, all you are seeing is an arrangement of characters disposed in a certain way that they are meaningful to you. &amp;ndash; for instance &amp;ldquo;blank&amp;rdquo; separations between words are an indication of different words &amp;ndash; so this give us an idea that, the way in which symbols are disposed mean something.</description>
    </item>
    
    <item>
      <title>A mystery using Python hashlib to calculate checksums</title>
      <link>https://daniel-m.github.io/2020/02/a-mystery-using-python-hashlib-to-calculate-checksums/</link>
      <pubDate>Tue, 04 Feb 2020 16:17:42 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2020/02/a-mystery-using-python-hashlib-to-calculate-checksums/</guid>
      <description>Recently I was working with hashing some files in order to take checksums to avoid working with data-corrupted files received at the endpoint of a web server. It sounds easy, receive the file, calculate the hash, and emit the response. I only needed something like hash = calculate_hash(file).
A five minute research on duckduckgo lead me to write the following code,
import hashlib def calculate_hash(filepath, chunk_size=4096, hash_method=hashlib.md5()): hasher = hash_method with open(filepath, &amp;#39;rb&amp;#39;) as fp: buffer = fp.</description>
    </item>
    
    <item>
      <title>Notes on Python multiprocessing</title>
      <link>https://daniel-m.github.io/2018/03/notes-on-python-multiprocessing/</link>
      <pubDate>Thu, 22 Mar 2018 21:53:32 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/03/notes-on-python-multiprocessing/</guid>
      <description>multiprocessing is a package that supports spawning processes using an API similar to the threading module.[1]
 The Pool object which offers a convenient means of parallelizing the execution of a function across multiple input values, distributing the input data across processes (data parallelism).[1]
 One should protect the “entry point” of the program by using if __name__ == &#39;__main__&#39; this line is mandatory.  One of the simplest ways of show the use of multi processing is,</description>
    </item>
    
    <item>
      <title>Python Web Frameworks: An Overview of Django vs Flask vs Tornado vs Pyramid</title>
      <link>https://daniel-m.github.io/2018/01/python-web-frameworks-an-overview-of-django-vs-flask-vs-tornado-vs-pyramid/</link>
      <pubDate>Thu, 25 Jan 2018 21:21:21 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/01/python-web-frameworks-an-overview-of-django-vs-flask-vs-tornado-vs-pyramid/</guid>
      <description>Reading guide The text is accompanied with questions and observations at the end, such that notes of the form (Q#) correspond to the question number # on the list. In the same fashion (O#) indicates the observation number #.
Notes on Flask http://flask.pocoo.org/ https://github.com/pallets/flask
 &amp;ldquo;Flask is a (Q1)microframework for Python based on Werkzeug(Q2), Jinja 2(Q3) and good intentions.&amp;rdquo;
 BSD Licensed.
 Latest release 0.12.2 (github tag).
 Flask is minimalistic, so it doesn&amp;rsquo;t decide for you what to use, it lets you to use extensions provided the task you need.</description>
    </item>
    
  </channel>
</rss>