<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Mejía Raigosa</title>
    <link>https://daniel-m.github.io/</link>
    <description>Recent content on Daniel Mejía Raigosa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Nov 2019 17:51:16 -0500</lastBuildDate>
    
	<atom:link href="https://daniel-m.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NVIDIA Optimus: A tale of two graphic cards</title>
      <link>https://daniel-m.github.io/2019/11/nvidia-optimus-a-tale-of-two-graphic-cards/</link>
      <pubDate>Tue, 12 Nov 2019 17:51:16 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2019/11/nvidia-optimus-a-tale-of-two-graphic-cards/</guid>
      <description>This is a short summary on how I managed to use the nvidia graphic card with my Debian Testing installation. I&amp;rsquo;ve cooked this blog since it may help other (and a future me) during their debian configuration stage
L&amp;rsquo;Entrée Most Linux users are familiar with the hassle of making Nvidia GPU&amp;rsquo;s working with their linux distributions. I&amp;rsquo;ve bought a Laptop that happens to run a new &amp;ndash; at least for me &amp;ndash; technology known as NVIDIA Optimus which allows to have an internal Intel Graphics Card running with dedicated Nvidia GPU, each independent of the other, so we can selectively render graphics at each card according to our performance needs, thus optimizing the use of resources mostly for Laptops like mine.</description>
    </item>
    
    <item>
      <title>Google&#39;s BigQuery and Go</title>
      <link>https://daniel-m.github.io/2019/02/googles-bigquery-and-go/</link>
      <pubDate>Fri, 15 Feb 2019 22:33:04 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2019/02/googles-bigquery-and-go/</guid>
      <description>Notes  BigQuery(BQ) is Google&amp;rsquo;s serverless, highly scalable, enterprise data warehouse
 SQL-like query language
 Real time data analysis by &amp;ldquo;streaming ingestion&amp;rdquo; capability
 Deals with gigabytes to petabytes of data volume
 Offers data encryption and data access permissions via Cloud Identity and Access Management
 Machine Learning and Bussiness Intel can be easily integrated with BQ
 Support for Geospatial data
  Interacting with BQ To interact with the BQ we can use:</description>
    </item>
    
    <item>
      <title>Notes on Go concurrency</title>
      <link>https://daniel-m.github.io/2019/01/notes-on-go-concurrency/</link>
      <pubDate>Tue, 01 Jan 2019 22:30:51 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2019/01/notes-on-go-concurrency/</guid>
      <description>Concurrent computing is a form of computing in which several computations are executed during overlapping time periods—concurrently—instead of sequentially (one completing before the next starts). This is a property of a system—this may be an individual program, a computer, or a network—and there is a separate execution point or &amp;ldquo;thread of control&amp;rdquo; for each computation (&amp;ldquo;process&amp;rdquo;). A concurrent system is one where a computation can advance without waiting for all other computations to complete</description>
    </item>
    
    <item>
      <title>ESP32: Blinking a LED</title>
      <link>https://daniel-m.github.io/2018/12/esp32-blinking-a-led/</link>
      <pubDate>Mon, 03 Dec 2018 20:40:25 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/12/esp32-blinking-a-led/</guid>
      <description>This post is part of a series of ESP32 blog posts. Look the index here
Motivation In the last blog of the series I wrote about freeRTOS tasks, and that the scheduler in FreeRTOS is designed to provide a predictable execution pattern. The Tasks allow to design better workflows for our applications, allowing to control memory allocation, and modularizing each task as separate entities which can run concurrently.
Blinking a led without using Tasks Programming embedded devices requires few extra steps than programming computers.</description>
    </item>
    
    <item>
      <title>ESP32: esp-idf Development Framework and the FreeRTOS kernel</title>
      <link>https://daniel-m.github.io/2018/11/esp32-esp-idf-development-framework-and-the-freertos-kernel/</link>
      <pubDate>Sat, 10 Nov 2018 00:40:25 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/11/esp32-esp-idf-development-framework-and-the-freertos-kernel/</guid>
      <description>This post is part of a series of ESP32 blog posts. Look the index here
Motivation In the last blog post of this series, we saw how to set up the basic development environment, then built and loaded a hello-world program included in the examples folder of the esp-idf (Espressif IoT Development Framework). Today I&amp;rsquo;ll try to give some details about what is actually happening in the process, about what is the operating system running within the ESP32, and how it works.</description>
    </item>
    
    <item>
      <title>ESP32: Setting up a development environment</title>
      <link>https://daniel-m.github.io/2018/10/esp32-setting-up-a-development-environment/</link>
      <pubDate>Sun, 28 Oct 2018 20:40:25 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/10/esp32-setting-up-a-development-environment/</guid>
      <description>This post is part of a series of ESP32 blog posts. Look the index here
Introduction (sort of) The ESP32 was originally conceived by espressif a multinational company with headquarters in Shangai, focused on developing cutting-edge WiFi-and-Bluetooth, low-power, IoT solutions. Among our popular products are the ESP8266 and ESP32 series of chips, modules and development boards.
The ESP32 can be programmed in several ways, among the languages and platforms supported the most popular are,</description>
    </item>
    
    <item>
      <title>Getting started with the ESP32</title>
      <link>https://daniel-m.github.io/2018/10/getting-started-with-the-esp32/</link>
      <pubDate>Sun, 28 Oct 2018 19:42:25 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/10/getting-started-with-the-esp32/</guid>
      <description>Motivation One of my hobbies during my school days was electronics after learning about B.E.A.M robots during a Popular Mechanics for Kids episode. You can learn more about B.E.A.M. here
During my University years I had the opportunity to refine my knowledge on basic electronics, and exploit my programming skills programming Arduino and Microchip microcontrollers (a.k.a MCUs). Those where days filled with fun, but I still wanted to be able to send data to remote locations, which could be possible by means of a RaspberryPI, or a GSM module or Bluetooth module &amp;ndash;which were expensive&amp;ndash; or having the Arduino/MCU connected to a regular computer with internet, so the whole point of small devices was not really possible at that time in terms of a good efficiency/cost relation.</description>
    </item>
    
    <item>
      <title>Alternative blog at http://blog.parallelo.ai</title>
      <link>https://daniel-m.github.io/2018/10/alternative-blog-at-http/blog.parallelo.ai/</link>
      <pubDate>Wed, 17 Oct 2018 12:23:57 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/10/alternative-blog-at-http/blog.parallelo.ai/</guid>
      <description>I&amp;rsquo;m not of an active blogger in this site, but you can take a look at http://blog.parallelo.ai and get in touch with some of my work-related blog posts.</description>
    </item>
    
    <item>
      <title>Continuous Integration and Continuous Delivery Systems On The Cloud</title>
      <link>https://daniel-m.github.io/2018/08/continuous-integration-and-continuous-delivery-systems-on-the-cloud/</link>
      <pubDate>Sat, 11 Aug 2018 21:57:55 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/08/continuous-integration-and-continuous-delivery-systems-on-the-cloud/</guid>
      <description>What are continuous integration(CI) and continuous delivery(CD) systems? According to Martin Fowler , one of the members of the Agile manifesto, Continuous Integration (CI),
 is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible.</description>
    </item>
    
    <item>
      <title>An Overview of Go Web Frameworks</title>
      <link>https://daniel-m.github.io/2018/06/an-overview-of-go-web-frameworks/</link>
      <pubDate>Tue, 26 Jun 2018 21:37:38 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/06/an-overview-of-go-web-frameworks/</guid>
      <description>Introduction Exploration of http servers in Go. The packages under considerations are,
 net/http
 https://github.com/go-chi/chi
 https://github.com/julienschmidt/httprouter
 https://github.com/gorilla/mux
 https://github.com/zenazn/goji/
 https://github.com/go-swagger/go-swagger
 https://github.com/manyminds/api2go
 https://github.com/labstack/echo
  https://github.com/go-chi/chi  chi is a lightweight, idiomatic and composable router for building Go 1.7+ HTTP services.
 Designed to support larg REST API services.
 built on top of context a go package that handles signaling, cancelation and request-scoped values across a handler chain.</description>
    </item>
    
    <item>
      <title>ImageNet: VGGNet, ResNet, Inception, and Xception with Keras</title>
      <link>https://daniel-m.github.io/2018/06/imagenet-vggnet-resnet-inception-and-xception-with-keras/</link>
      <pubDate>Fri, 01 Jun 2018 21:47:48 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/06/imagenet-vggnet-resnet-inception-and-xception-with-keras/</guid>
      <description>Link: https://www.pyimagesearch.com/2017/03/20/imagenet-vggnet-resnet-inception-xception-keras/ Key concepts:  CNN: Convolutional Neural Network
 ImageNet dataset
 ImageNet Large Scale Visual Recognition Challenge: train a model that can correctly classify an input image into 1,000 separate object categories. ImageNet challenge is the de facto benchmark for computer vision classification algorithms
 Weight serialization
 Weights of a neural network
 Pooling
 Softmax
  Notes:  Keras comes integrated with VGG16, VGG19, ResNet50, Inception V3, and Xception neural network models (look inside applications submodules)</description>
    </item>
    
    <item>
      <title>Notes on Python multiprocessing</title>
      <link>https://daniel-m.github.io/2018/03/notes-on-python-multiprocessing/</link>
      <pubDate>Thu, 22 Mar 2018 21:53:32 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/03/notes-on-python-multiprocessing/</guid>
      <description>multiprocessing is a package that supports spawning processes using an API similar to the threading module.[1]
 The Pool object which offers a convenient means of parallelizing the execution of a function across multiple input values, distributing the input data across processes (data parallelism).[1]
 One should protect the “entry point” of the program by using if __name__ == &#39;__main__&#39; this line is mandatory.  One of the simplest ways of show the use of multi processing is,</description>
    </item>
    
    <item>
      <title>The GeoJSON Format</title>
      <link>https://daniel-m.github.io/2018/02/the-geojson-format/</link>
      <pubDate>Thu, 15 Feb 2018 21:30:14 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/02/the-geojson-format/</guid>
      <description>General notes and remarks Abreviations of interest,
 WKB - Well Known Binary.
 WKT - Well Known Text.
  Introduction GeoJSON is a geospatial data interchange format based on JavaScript Object Notation (JSON). It defines several types of JSON objects and the manner in which they are combined to represent data about geographic features, their properties, and their spatial extents. GeoJSON uses a geographic coordinate reference system, World Geodetic System 1984, and units of decimal degrees.</description>
    </item>
    
    <item>
      <title>Python Web Frameworks: An Overview of Django vs Flask vs Tornado vs Pyramid</title>
      <link>https://daniel-m.github.io/2018/01/python-web-frameworks-an-overview-of-django-vs-flask-vs-tornado-vs-pyramid/</link>
      <pubDate>Thu, 25 Jan 2018 21:21:21 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/01/python-web-frameworks-an-overview-of-django-vs-flask-vs-tornado-vs-pyramid/</guid>
      <description>Reading guide The text is accompanied with questions and observations at the end, such that notes of the form (Q#) correspond to the question number # on the list. In the same fashion (O#) indicates the observation number #.
Notes on Flask http://flask.pocoo.org/ https://github.com/pallets/flask
 &amp;ldquo;Flask is a (Q1)microframework for Python based on Werkzeug(Q2), Jinja 2(Q3) and good intentions.&amp;rdquo;
 BSD Licensed.
 Latest release 0.12.2 (github tag).
 Flask is minimalistic, so it doesn&amp;rsquo;t decide for you what to use, it lets you to use extensions provided the task you need.</description>
    </item>
    
    <item>
      <title>Old Blog</title>
      <link>https://daniel-m.github.io/2018/01/old-blog/</link>
      <pubDate>Mon, 01 Jan 2018 06:32:12 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/2018/01/old-blog/</guid>
      <description>Daniel&amp;rsquo;s log book The site https://dalogbook.blogspot.com/ is my old blog, which I haven&amp;rsquo;t updated since forever. Nevertheless I have lots of drafts soon to be published so stay tuned for updates.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://daniel-m.github.io/about/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://daniel-m.github.io/about/</guid>
      <description>Hi! I&amp;rsquo;m Daniel, a physicist very passionate about problem solving, research, and computer programming that spends most of its days telling computers how to do stuff. I enjoy blogging, mostly about computer programming, you also can read me at http://blog.parallelo.ai.
If you wanna know more about me, my work, my research or my programming projects, click any social network icon on the home screen.
What I&amp;rsquo;m Doing Now? I find the practice of the nownownow really interesting,</description>
    </item>
    
    <item>
      <title>What I&#39;m Doing Now?</title>
      <link>https://daniel-m.github.io/now/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://daniel-m.github.io/now/</guid>
      <description>Hey, this is my now page, in summary I&amp;rsquo;m doing these,
 All the time I&amp;rsquo;m studying a set of classic papers on deep learning and convolutional neural networks (CNN) and the associated machine learning (I&amp;rsquo;ll have blogs really soon).
 Until Next August 30 (2019) I&amp;rsquo;m an Udacity Scholar for the Secure and Private AI Challenge, stay tuned for updates .
 Learning and working with computer vision and deep learning with OpenCV and PyTorch.</description>
    </item>
    
  </channel>
</rss>