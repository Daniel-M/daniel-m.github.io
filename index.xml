<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Mejía Raigosa on Daniel Mejía Raigosa</title>
    <link>https://daniel-m.github.io/</link>
    <description>Recent content in Daniel Mejía Raigosa on Daniel Mejía Raigosa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Daniel Mejía R.</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ESP32: Setting up a development environment</title>
      <link>https://daniel-m.github.io/post/2018/oct/esp32/esp32-2-setting_up_development_environment/</link>
      <pubDate>Sun, 28 Oct 2018 20:40:25 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/post/2018/oct/esp32/esp32-2-setting_up_development_environment/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://daniel-m.github.io/post/2018/oct/esp32/esp32-1_getting_started/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;This post is part of a series of ESP32 blog posts. Look the index here&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction-sort-of&#34;&gt;Introduction (sort of)&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.espressif.com/en/products/hardware/esp32&#34; target=&#34;_blank&#34;&gt;ESP32&lt;/a&gt; was originally conceived by
&lt;a href=&#34;https://www.espressif.com/&#34; target=&#34;_blank&#34;&gt;espressif&lt;/a&gt; a multinational company with
headquarters in Shangai, focused on developing cutting-edge WiFi-and-Bluetooth,
low-power, IoT solutions. Among our popular products are the ESP8266 and ESP32
series of chips, modules and development boards.&lt;/p&gt;

&lt;p&gt;The ESP32 can be programmed in several ways, among the languages and platforms
supported the most popular are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://micropython.org&#34; target=&#34;_blank&#34;&gt;MicroPython&lt;/a&gt; a python implementation for embedded
systems.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.arduino.cc/en/Main/Software&#34; target=&#34;_blank&#34;&gt;Arduino IDE&lt;/a&gt; the IDE for Arduino
platforms.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nodemcu.com/&#34; target=&#34;_blank&#34;&gt;NodeMCU&lt;/a&gt; a platform to program embedded systems
using Lua.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://platformio.org/platformio-ide&#34; target=&#34;_blank&#34;&gt;PlatformIO&lt;/a&gt; a project which aims to
provide an unified development tool for embedded systems.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/espressif/esp-idf&#34; target=&#34;_blank&#34;&gt;Espressif esp-idf&lt;/a&gt; Espressif IoT Development Framework. Official development framework for ESP32. I&amp;rsquo;ll be using this.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getting-a-working-espressif-esp-idf-environment&#34;&gt;Getting a working Espressif esp-idf environment&lt;/h2&gt;

&lt;p&gt;This part is based on &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/stable/get-started/&#34; target=&#34;_blank&#34;&gt;the official instructions by espressif&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The installation process consists of two steps,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up the toolchain.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Setting up the Espressif esp-idf from github.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the esp-idf, head to &lt;a href=&#34;https://github.com/espressif/esp-idf&#34; target=&#34;_blank&#34;&gt;https://github.com/espressif/esp-idf&lt;/a&gt;,
click the &lt;code&gt;releases&lt;/code&gt; button and download the latest release available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./idf-releases.png&#34; alt=&#34;IDF releases&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now install some prerequisites to the build process,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install gcc git wget make libncurses-dev flex bison gperf python python-serial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, a recommended place to install the esp-idf is the path &lt;code&gt;$HOME/opt/esp&lt;/code&gt;. In
order to simplify the install process, declare the following variable,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export ESP_PATH=$HOME/opt/esp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And create the required destination directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir $ESP_PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-the-toolchain&#34;&gt;Getting the toolchain&lt;/h3&gt;

&lt;p&gt;The toolchain can be obtained by one of two ways,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building from source. This allows to have a custom toolchain if some
configurations are set.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Using a precompiled toolchain. This approach is more restrictive, but
straightforward.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve tried both approaches, and found that the later is the simplest way to get
a working toolchain.&lt;/p&gt;

&lt;p&gt;There are OS specific instructions for &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/v3.1/get-started/windows-setup.html&#34; target=&#34;_blank&#34;&gt;Windows&lt;/a&gt;,
&lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/v3.1/get-started/linux-setup.html&#34; target=&#34;_blank&#34;&gt;Linux&lt;/a&gt;,
and &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/v3.1/get-started/macos-setup.html&#34; target=&#34;_blank&#34;&gt;MacOS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As the time of writing this blog, the latest precompiled toolchain could be
obtained in Linux by running,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $ESP_PATH
wget https://dl.espressif.com/dl/xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
tar xvfz xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, add the toolchain to the &lt;code&gt;$PATH&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=&amp;quot;$PATH:$HOME/opt/esp/xtensa-esp32-elf/bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-the-esp-idf&#34;&gt;Getting the ESP-IDF&lt;/h3&gt;

&lt;p&gt;First, we need to define an environment variable pointing to the destination
of the esp-idf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export IDF_PATH=$ESP_PATH/esp-idf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can head there and get the latest version of the esp-idf from github&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $ESP_PATH
git clone -b v3.1 --recursive https://github.com/espressif/esp-idf.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can replace &lt;code&gt;v3.1&lt;/code&gt; with the latest tag available in the repository. Now, to
bootstrap the repository,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $IDF_PATH
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The currently logged user should have read and write access the serial port over USB.
On most Linux distributions, this is done by adding the user to &lt;code&gt;dialout&lt;/code&gt; group
with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo usermod -a -G dialout $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you re-login to the shell in order to the changes to take effect
(there are other ways to achieve this, but maybe the most universal way is a
simple logout)&lt;/p&gt;

&lt;p&gt;To test the installation you can run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xtensa-esp32-elf-gcc --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-serial-communications&#34;&gt;Testing serial communications&lt;/h2&gt;

&lt;p&gt;A bunch of blog posts cover the ways in which we can read and write to a serial
port in linux. For example, &lt;a href=&#34;https://www.cyberciti.biz/hardware/5-linux-unix-commands-for-connecting-to-the-serial-console/&#34; target=&#34;_blank&#34;&gt;this blog post shows several options&lt;/a&gt;. In linux systems a way
to detect the serial port used by our device is to list the contents of the
tty&amp;rsquo;s available under &lt;code&gt;/dev&lt;/code&gt; with &lt;code&gt;ls /dev/tty*&lt;/code&gt;, then connect the ESP32 with
the USB cable and list &lt;code&gt;ls /dev/tty*&lt;/code&gt; again. You&amp;rsquo;ll notice that a new element
appears with the name &lt;code&gt;/dev/ttyS0&lt;/code&gt; or &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; (or any other number like
ttyUSB1, depending on your particular hardware and linux distribution).&lt;/p&gt;

&lt;h3 id=&#34;picocom&#34;&gt;Picocom&lt;/h3&gt;

&lt;p&gt;Picocom is a minimal terminal emulator which can be connected to the serial
port. To get it installed just run,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install picocom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect the ESP32. If it is connected to the &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; serial port, you can
check the connection with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;picocom /dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;esp-idf-monitor&#34;&gt;esp-idf monitor&lt;/h3&gt;

&lt;p&gt;esp-idf comes with a serial monitor which can be run with &lt;code&gt;make monitor&lt;/code&gt; under
a project&amp;rsquo;s directory.&lt;/p&gt;

&lt;p&gt;The simplest way to check that everything is properly installed is to burn the
&lt;code&gt;hello world&lt;/code&gt; included with the esp-idf,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $IDF_PATH/examples/get-started/hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This compiles the program. To load it to the ESP32, connect it with the USB
cable and run,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make flash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will take care of everything.&lt;/p&gt;

&lt;p&gt;To check the actual &lt;code&gt;hello world&lt;/code&gt;, wait until the load is completed and either run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;picocom /dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make monitor # from within the hello-world proyect folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see something like this,&lt;/p&gt;

&lt;p&gt;![The hello-wolrd]()&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with the ESP32</title>
      <link>https://daniel-m.github.io/post/2018/oct/esp32/esp32-1_getting_started/</link>
      <pubDate>Sun, 28 Oct 2018 19:42:25 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/post/2018/oct/esp32/esp32-1_getting_started/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;One of my hobbies during my school days was electronics after learning about
&lt;a href=&#34;https://en.wikipedia.org/wiki/BEAM_robotics&#34; target=&#34;_blank&#34;&gt;B.E.A.M&lt;/a&gt; robots during a &lt;em&gt;Popular
Mechanics for Kids&lt;/em&gt; episode. &lt;a href=&#34;http://solarbotics.net/&#34; target=&#34;_blank&#34;&gt;You can learn more about B.E.A.M. here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During my University years I had the opportunity to refine my knowledge on basic
electronics, and exploit my programming skills programming Arduino and Microchip
microcontrollers (a.k.a MCUs). Those where days filled with fun, but I still
wanted to be able to send data to remote locations, which could be possible by
means of a RaspberryPI, or a GSM module or Bluetooth module &amp;ndash;which were expensive&amp;ndash;,
or having the Arduino/MCU connected to a regular computer with internet,
so the whole point of &lt;em&gt;small&lt;/em&gt; devices was not really possible at that time
in terms of a good efficiency/cost relation.&lt;/p&gt;

&lt;p&gt;After several years without doing electronics, I&amp;rsquo;ve heard about the ESP8266 chip
and its predecessor the ESP32. The most appealing feature of those chips
was the built-in support for Wi-Fi or Bluetooth technologies, all shipped in
convenient development boards which can be programmed either with C, Python, or Lua.&lt;/p&gt;

&lt;p&gt;I got lured by the possibilities of having remote controlled electronics and bought
an ESP32 development board. As I progress in learning how to use it, I&amp;rsquo;ll blog about
my experiences getting this new toy up and running, the pitfalls I ran into and
how I manage to solve them.&lt;/p&gt;

&lt;p&gt;As I publish blog entries, they will be linked in the table of contents near the
end of this blog post.&lt;/p&gt;

&lt;h2 id=&#34;but-what-exactly-is-an-esp32&#34;&gt;But what exactly is an ESP32?&lt;/h2&gt;

&lt;p&gt;The ESP32 is a low-cost, low-power system on a chip (SoC) series with Wi-Fi and
dual-mode Bluetooth capabilities, powered by a single or dual core Tensilica
Xtensa LX6 microprocessor with a clock rate of up to 240 MHz. Yes, a tiny chip
with the clock rate of an old
&lt;a href=&#34;https://en.wikipedia.org/wiki/Pentium_II&#34; target=&#34;_blank&#34;&gt;Intel Pentium II CPU&lt;/a&gt;, shipped with
Wi-Fi and Bluetooth. The availability of two ADC channels and more than 15
General purpose Input Output pins (GPIO), makes this chip really powerful to IoT
applications.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how my ESP32 &amp;ndash;based on the &lt;a href=&#34;https://docs.zerynth.com/latest/official/board.zerynth.doit_esp32/docs/index.html&#34; target=&#34;_blank&#34;&gt;doit ESP32 Devkit v1&lt;/a&gt;&amp;ndash; came,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;esp32_2.jpg&#34; alt=&#34;New toy ESP32&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;esp32_1.jpg&#34; alt=&#34;New toy ESP32 other view&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A sneak peak of what is comming,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;blinker.gif&#34; alt=&#34;Blinking&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;The following blogs are related to ESP32&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://daniel-m.github.io/post/2018/nov/esp32/esp32-2-setting_up_development_environment/&#34; target=&#34;_blank&#34;&gt;Setting up a development environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lucadentella.it/en/category/esp32&#34; target=&#34;_blank&#34;&gt;http://www.lucadentella.it/en/category/esp32&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Alternative blog at http://blog.parallelo.ai</title>
      <link>https://daniel-m.github.io/post/2018/oct/alternative-blog/</link>
      <pubDate>Wed, 17 Oct 2018 12:23:57 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/post/2018/oct/alternative-blog/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not of an active blogger in this site, but you can take a look at
&lt;strong&gt;&lt;a href=&#34;http://blog.parallelo.ai&#34; target=&#34;_blank&#34;&gt;http://blog.parallelo.ai&lt;/a&gt;&lt;/strong&gt; and get in touch with
some of my work-related blog posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Old Blog</title>
      <link>https://daniel-m.github.io/post/2017/old-blog/</link>
      <pubDate>Mon, 01 Jan 2018 06:32:12 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/post/2017/old-blog/</guid>
      <description>

&lt;h1 id=&#34;daniel-s-log-book&#34;&gt;Daniel&amp;rsquo;s log book&lt;/h1&gt;

&lt;p&gt;The site &lt;a href=&#34;https://dalogbook.blogspot.com/&#34; target=&#34;_blank&#34;&gt;https://dalogbook.blogspot.com/&lt;/a&gt; is my old blog, which I haven&amp;rsquo;t updated
since forever. Nevertheless I have lots of drafts soon to be published so stay tuned for updates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop of OpenCV 3.3.0 with Python3</title>
      <link>https://daniel-m.github.io/course/workshop-opencv-python/</link>
      <pubDate>Thu, 14 Dec 2017 14:00:28 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/course/workshop-opencv-python/</guid>
      <description>&lt;p&gt;A short course to introduce computer vision with the python bindings for OpenCV. The course materials are available at &lt;a href=&#34;https://github.com/Daniel-M/Workshop_OpenCV&#34; target=&#34;_blank&#34;&gt;https://github.com/Daniel-M/Workshop_OpenCV&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intracellular fluorescent dyes</title>
      <link>https://daniel-m.github.io/project/intracellular-dyes/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://daniel-m.github.io/project/intracellular-dyes/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures with Machine Learning</title>
      <link>https://daniel-m.github.io/talk/adventures-ml/</link>
      <pubDate>Mon, 13 Nov 2017 10:00:24 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/talk/adventures-ml/</guid>
      <description>&lt;p&gt;Slides for the study group on Deep Learning. The presentation was part of the motivation of the group.
The slides and materials can be found at &lt;a href=&#34;https://bitbucket.org/Daniel-M/ml_adventures_slides&#34; target=&#34;_blank&#34;&gt;https://bitbucket.org/Daniel-M/ml_adventures_slides&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Python for Biologists</title>
      <link>https://daniel-m.github.io/course/intro-python-biologos/</link>
      <pubDate>Wed, 04 May 2016 10:31:01 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/course/intro-python-biologos/</guid>
      <description>&lt;p&gt;Course materials for the short course &amp;ldquo;Introducción a Python para Biologos&amp;rdquo; held at the University of Antioquia, east headquarters at Rionegro.
The materials are available at &lt;a href=&#34;https://github.com/Daniel-M/IntroPythonBiologos&#34; target=&#34;_blank&#34;&gt;https://github.com/Daniel-M/IntroPythonBiologos&lt;/a&gt;.
&lt;a href=&#34;http://nbviewer.jupyter.org/github/Daniel-M/IntroPythonBiologos/blob/master/doc/notes/IntroPythonBiologos.ipynb&#34; target=&#34;_blank&#34;&gt;An online version can be seen here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GNU Linux 2016</title>
      <link>https://daniel-m.github.io/course/gnu-linux-2016/</link>
      <pubDate>Sat, 20 Feb 2016 10:30:46 -0500</pubDate>
      
      <guid>https://daniel-m.github.io/course/gnu-linux-2016/</guid>
      <description>&lt;p&gt;Materials for the course on GNU/Linux console and fundamentals of version control with git. The course consisted of two sessions of 4 hours each,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://daniel-m.github.io/files/courses/2016/C.I._Linux_Febrero_2016_Sesion_1.pdf&#34;&gt;First session&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://daniel-m.github.io/files/courses/2016/C.I._Linux_Febrero_2016_Sesion_2.pdf&#34;&gt;Second session&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cyclin-dependent kinase 5, a node protein in diminished tauopathy: A systems biology approach</title>
      <link>https://daniel-m.github.io/publication/cyclin-dependent-neuro/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://daniel-m.github.io/publication/cyclin-dependent-neuro/</guid>
      <description>&lt;p&gt;#More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calibration of Ca2&#43; Transients Obtained with the Fast Ca2&#43; and Mg2&#43; Dye Magfluo-4</title>
      <link>https://daniel-m.github.io/publication/magfluo4-calibration/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://daniel-m.github.io/publication/magfluo4-calibration/</guid>
      <description>&lt;p&gt;#More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
